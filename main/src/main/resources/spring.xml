<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <context:component-scan base-package="com.zbkblog" />

    <!-- 解决使用@ResposenBody返回中文乱码和返回Map错误问题 -->
    <!-- DefaultAnnotationHandlerMapping 和 AnnotationMethodHandlerAdapter 的使用已经过时！
        spring 3.1 开始应该用
        RequestMappingHandlerMapping 来替换 DefaultAnnotationHandlerMapping，
        RequestMappingHandlerAdapter 来替换 AnnotationMethodHandlerAdapter。 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="stringHttpMessageConverter"/>
                <ref bean="mappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
    <bean id="stringHttpMessageConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- rest json related... start -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <mvc:annotation-driven />


    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
    <!--<mvc:resources mapping="/bootstrap/**" location="/bootstrap/" />-->
    <!--<mvc:resources mapping="/bootstraptable/**" location="/bootstraptable/" />-->
    <!--<mvc:resources mapping="/img/**" location="/img/" />-->
    <!--<mvc:resources mapping="/js/**" location="/js/" />-->
    <!--<mvc:resources mapping="/css/**" location="/css/" />-->
    <mvc:resources mapping="/static/**" location="/static/" />
    <mvc:resources mapping="/images/**" location="/images/" />

    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 指定前缀，所在目录，起点/为webroot -->
        <property name="prefix" value="/WEB-INF/jsp/">
        </property>
        <!-- 指定后缀扩展名 -->
        <property name="suffix" value=".jsp">
        </property>
    </bean>

    <!-- 注入数据库配置资源文件 -->
    <util:properties id="dbCfg" location="classpath:db.properties"></util:properties>
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <!--<context:property-placeholder location="classpath:db.properties" />-->
    <!-- 1定义dbcp数据库连接池 -->
    <bean id="dbcp" class="org.apache.commons.dbcp2.BasicDataSource">
        <!--<property name="username" value="${jdbc.username}"></property>-->
        <!--<property name="password" value="${jdbc.password}"></property>-->
        <!--<property name="driverClassName"-->
                  <!--value="${jdbc.driverClassName}"></property>-->
        <!--<property name="url"-->
                  <!--value="${jdbc.url}"></property>-->
        <property name="username" value="#{dbCfg.username}"></property>
        <property name="password" value="#{dbCfg.password}"></property>
        <property name="driverClassName"
                  value="#{dbCfg.driverClassName}"></property>
        <property name="url"
                  value="#{dbCfg.url}"></property>
    </bean>
    <!-- 2创建SqlSessionFactory -->
    <bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dbcp" />
        <!-- 加载mapper目录下所有的SQL定义文件 -->
        <property name="mapperLocations"
                  value="classpath:com/zbkblog/mapper/*.xml">
        </property>
        <!-- 分页插件相关 -->
        <!--可能是实体类<property name="typeAliasesPackage" value="com.isea533.mybatis.model"/>-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            <!--数据库使用什么数据库-->
                            helperDialect=mysql
                            <!-- 默认false,将 RowBounds 中的 offset 参数当成 pageNum 使用
                            可以用页码和页面大小两个参数进行分页。-->
                            offsetAsPageNum=true
                            <!--默认值为false，该参数对使用 RowBounds 作为分页参数时有效。
                            当该参数设置为true时，使用 RowBounds 分页会进行 count 查询-->
                            rowBoundsWithCount=true
                            <!--分页合理化参数，默认值为false。当该参数设置为 true 时，
                            pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），
                            会查询最后一页。默认false 时，直接根据参数进行查询-->
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
        <!-- 分页插件相关 end -->

    </bean>
    <!-- 3定义MapperScannerConfigurer，将mapper(Dao)接口生成实现对象
        使用接口名首字母小写做对象的id，所以要使用就直接使用接口名首字母小写就行 -->
    <bean id="mapperScanner"
          class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 3.1注入SqlSessionFactory -->
        <property name="sqlSessionFactory" ref="ssf">
        </property>
        <!-- 3.2注入mapper接口所在位置,将dao包下所有接口生成实现对象(和SQL定义文件对应的Dao接口) -->
        <property name="basePackage" value="com.zbkblog.dao">
        </property>
    </bean>

</beans>