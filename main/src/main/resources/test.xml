<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:properties/db.properties" />

    <context:component-scan base-package="com.zbkblog" />


    <mvc:annotation-driven />


    <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->


    <!--c3p0连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${c3p0.driverClassName}" />
        <property name="jdbcUrl" value="${c3p0.url}" />
        <property name="user" value="${c3p0.user}" />
        <property name="password" value="${c3p0.pass}" />
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
        <property name="minPoolSize" value="${c3p0.minPoolSize}" />
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
        <property name="maxStatements" value="${c3p0.maxStatements}" />
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
    </bean>
    <!-- Spring整合Hibernate配置 -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!--
        <property name="configLocation" value="classpath:hibernate.cfg.xml">
        </property>
         -->
        <!-- 指定数据库参数 -->
        <property name="dataSource" ref="dataSource"></property>
        <!-- 指定hibernate参数 -->
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
        <!-- 指定映射描述文件 -->
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath*:com/zbkblog/hbm</value>
            </list>
        </property>
    </bean>

    <!-- 配置Hibernate事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />

    <!-- 配置事务异常封装 -->
    <!--<bean id="persistenceExceptionTranslationPostProcessor"-->
          <!--class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />-->


    <!--  声明式容器事务管理 ,transaction-manager指定事务管理器为transactionManager -->
    <!--<tx:advice id="txAdvice" transaction-manager="transactionManager">-->
        <!--<tx:attributes>-->
            <!--<tx:method name="get*" propagation="REQUIRED" read-only="true" />-->
            <!--<tx:method name="find*" propagation="REQUIRED" read-only="true" />-->
            <!--<tx:method name="query*" propagation="REQUIRED" read-only="true" />-->
            <!--<tx:method name="load*" propagation="REQUIRED" read-only="true" />-->
            <!--<tx:method name="*" propagation="REQUIRED" />-->
        <!--</tx:attributes>-->
    <!--</tx:advice>-->

    <!--&lt;!&ndash;<aop:config expose-proxy="true">&ndash;&gt;-->
    <!--<aop:config>-->
        <!--&lt;!&ndash; 只对业务逻辑层实施事务 &ndash;&gt;-->
        <!--<aop:pointcut id="txPointcut" expression="execution(* com.zbkblog.service..*.*(..))" />-->
        <!--&lt;!&ndash; aop:pointcut id="txPointcut" expression="execution(* cn.himto.module.web..service..*.*(..)) OR (execution (* cn.himto.module.XXX.service..*.*(..)))" /&ndash;&gt;-->
        <!--&lt;!&ndash; Advisor定义，切入点和通知分别为txPointcut、txAdvice &ndash;&gt;-->
        <!--<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->


    <!-- 将Dao纳入Spring容器 -->
    <!--<context:component-scan base-package="com.zbkblog.dao"/>-->
    <!-- 定义HibernateTemplate给Dao注入用 -->
    <!--<bean id="template" class="org.springframework.orm.hibernate4.HibernateTemplate">-->
        <!--<property name="sessionFactory" ref="sessionFactory">-->
        <!--</property>-->
    <!--</bean>-->
    <!-- Spring声明式事务管理 -->
    <!--<bean id="txManager"-->
          <!--class="org.springframework.orm.hibernate4.HibernateTransactionManager">-->
        <!--<property name="sessionFactory" ref="sessionFactory">-->
        <!--</property>-->
    <!--</bean>-->


    <!-- 开启@Transactional事务注解 -->
    <!--<tx:annotation-driven transaction-manager="txManager"/>-->

    <!--&lt;!&ndash; 2创建SqlSessionFactory &ndash;&gt;-->
    <!--<bean id="ssf" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dbcp" />-->
        <!--&lt;!&ndash; 加载mapper目录下所有的SQL定义文件 &ndash;&gt;-->
        <!--<property name="mapperLocations"-->
                  <!--value="classpath:com/zbkblog/mapper/*.xml">-->
        <!--</property>-->
        <!--&lt;!&ndash; 分页插件相关 &ndash;&gt;-->
        <!--&lt;!&ndash;可能是实体类<property name="typeAliasesPackage" value="com.isea533.mybatis.model"/>&ndash;&gt;-->
        <!--<property name="plugins">-->
            <!--<array>-->
                <!--<bean class="com.github.pagehelper.PageInterceptor">-->
                    <!--&lt;!&ndash; 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 &ndash;&gt;-->
                    <!--<property name="properties">-->
                        <!--<value>-->
                            <!--&lt;!&ndash;数据库使用什么数据库&ndash;&gt;-->
                            <!--helperDialect=mysql-->
                            <!--&lt;!&ndash; 默认false,将 RowBounds 中的 offset 参数当成 pageNum 使用-->
                            <!--可以用页码和页面大小两个参数进行分页。&ndash;&gt;-->
                            <!--offsetAsPageNum=true-->
                            <!--&lt;!&ndash;默认值为false，该参数对使用 RowBounds 作为分页参数时有效。-->
                            <!--当该参数设置为true时，使用 RowBounds 分页会进行 count 查询&ndash;&gt;-->
                            <!--rowBoundsWithCount=true-->
                            <!--&lt;!&ndash;分页合理化参数，默认值为false。当该参数设置为 true 时，-->
                            <!--pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），-->
                            <!--会查询最后一页。默认false 时，直接根据参数进行查询&ndash;&gt;-->
                            <!--reasonable=true-->
                            <!--supportMethodsArguments=true-->
                            <!--params=count=countSql-->
                            <!--autoRuntimeDialect=true-->
                        <!--</value>-->
                    <!--</property>-->
                <!--</bean>-->
            <!--</array>-->
        <!--</property>-->
        <!--&lt;!&ndash; 分页插件相关 end &ndash;&gt;-->

    <!--</bean>-->
    <!--&lt;!&ndash; 3定义MapperScannerConfigurer，将mapper(Dao)接口生成实现对象-->
        <!--使用接口名首字母小写做对象的id，所以要使用就直接使用接口名首字母小写就行 &ndash;&gt;-->
    <!--<bean id="mapperScanner"-->
          <!--class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--&lt;!&ndash; 3.1注入SqlSessionFactory &ndash;&gt;-->
        <!--<property name="sqlSessionFactory" ref="ssf">-->
        <!--</property>-->
        <!--&lt;!&ndash; 3.2注入mapper接口所在位置,将dao包下所有接口生成实现对象(和SQL定义文件对应的Dao接口) &ndash;&gt;-->
        <!--<property name="basePackage" value="com.zbkblog.dao">-->
        <!--</property>-->
    <!--</bean>-->

</beans>